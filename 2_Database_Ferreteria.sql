-- MySQL Script generated by MySQL Workbench
-- 11/20/16 14:25:34
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema ferreteria
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ferreteria
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ferreteria` DEFAULT CHARACTER SET utf8 ;
USE `ferreteria` ;

-- -----------------------------------------------------
-- Table `ferreteria`.`amonestaciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`amonestaciones` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`amonestaciones` (
  `idAmonestacion` INT(11) NOT NULL AUTO_INCREMENT,
  `tipo` VARCHAR(50) NOT NULL,
  `diasSuspendido` INT(11) NOT NULL,
  PRIMARY KEY (`idAmonestacion`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `ferreteria`.`sedes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`sedes` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`sedes` (
  `idSede` INT(11) NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(100) NOT NULL,
  `ubicacion` POLYGON NOT NULL,
  PRIMARY KEY (`idSede`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `ferreteria`.`planillas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`planillas` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`planillas` (
  `cedula` INT(11) NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  `apellidoP` VARCHAR(50) NOT NULL,
  `apellidoM` VARCHAR(50) NOT NULL,
  `idSede` INT(11) NOT NULL,
  `fechaContratado` DATE NOT NULL,
  `estado` INT(11) NOT NULL,
  PRIMARY KEY (`cedula`),
  CONSTRAINT `planillas_ibfk_1`
    FOREIGN KEY (`idSede`)
    REFERENCES `ferreteria`.`sedes` (`idSede`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `idSede` ON `ferreteria`.`planillas` (`idSede` ASC);


-- -----------------------------------------------------
-- Table `ferreteria`.`amonestacionesxempleados`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`amonestacionesxempleados` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`amonestacionesxempleados` (
  `idAxE` INT(11) NOT NULL AUTO_INCREMENT,
  `cedEmpleado` INT(11) NOT NULL,
  `idAmonestacion` INT(11) NOT NULL,
  `fechaAmonestacion` DATE NOT NULL,
  PRIMARY KEY (`idAxE`),
  CONSTRAINT `amonestacionesxempleados_ibfk_1`
    FOREIGN KEY (`cedEmpleado`)
    REFERENCES `ferreteria`.`planillas` (`cedula`),
  CONSTRAINT `amonestacionesxempleados_ibfk_2`
    FOREIGN KEY (`idAmonestacion`)
    REFERENCES `ferreteria`.`amonestaciones` (`idAmonestacion`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `cedEmpleado` ON `ferreteria`.`amonestacionesxempleados` (`cedEmpleado` ASC);

CREATE INDEX `idAmonestacion` ON `ferreteria`.`amonestacionesxempleados` (`idAmonestacion` ASC);


-- -----------------------------------------------------
-- Table `ferreteria`.`aspectostecnicos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`aspectostecnicos` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`aspectostecnicos` (
  `idAspectoT` INT(11) NOT NULL AUTO_INCREMENT,
  `aspecto` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`idAspectoT`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `ferreteria`.`marcas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`marcas` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`marcas` (
  `idMarca` INT(11) NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(50) NULL DEFAULT NULL,
  PRIMARY KEY (`idMarca`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `ferreteria`.`productos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`productos` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`productos` (
  `idProducto` INT(11) NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(50) NOT NULL,
  `descripcion` VARCHAR(100) NULL DEFAULT NULL,
  `utilidad` VARCHAR(50) NULL DEFAULT NULL,
  `precio` DOUBLE NOT NULL,
  `precioVenta` DOUBLE NOT NULL,
  `idMarca` INT(11) NOT NULL,
  PRIMARY KEY (`idProducto`),
  CONSTRAINT `productos_ibfk_1`
    FOREIGN KEY (`idMarca`)
    REFERENCES `ferreteria`.`marcas` (`idMarca`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `idMarca` ON `ferreteria`.`productos` (`idMarca` ASC);


-- -----------------------------------------------------
-- Table `ferreteria`.`aspectosxproductos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`aspectosxproductos` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`aspectosxproductos` (
  `idAxP` INT(11) NOT NULL AUTO_INCREMENT,
  `idAspectoT` INT(11) NOT NULL,
  `idProducto` INT(11) NOT NULL,
  PRIMARY KEY (`idAxP`),
  CONSTRAINT `aspectosxproductos_ibfk_1`
    FOREIGN KEY (`idAspectoT`)
    REFERENCES `ferreteria`.`aspectostecnicos` (`idAspectoT`),
  CONSTRAINT `aspectosxproductos_ibfk_2`
    FOREIGN KEY (`idProducto`)
    REFERENCES `ferreteria`.`productos` (`idProducto`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `idAspectoT` ON `ferreteria`.`aspectosxproductos` (`idAspectoT` ASC);

CREATE INDEX `idProducto` ON `ferreteria`.`aspectosxproductos` (`idProducto` ASC);


-- -----------------------------------------------------
-- Table `ferreteria`.`clientes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`clientes` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`clientes` (
  `cedula` INT(11) NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  `apellidoP` VARCHAR(50) NOT NULL,
  `apellidoM` VARCHAR(50) NOT NULL,
  `correo` VARCHAR(100) NOT NULL,
  `numero` VARCHAR(9) NOT NULL,
  PRIMARY KEY (`cedula`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE UNIQUE INDEX `correo` ON `ferreteria`.`clientes` (`correo` ASC);

CREATE UNIQUE INDEX `numero` ON `ferreteria`.`clientes` (`numero` ASC);


-- -----------------------------------------------------
-- Table `ferreteria`.`backorders`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`backorders` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`backorders` (
  `idBackorder` INT(11) NOT NULL AUTO_INCREMENT,
  `cedCliente` INT(11) NOT NULL,
  `cedEmpleado` INT(11) NOT NULL,
  `idProducto` INT(11) NOT NULL,
  `cantidad` INT(11) NOT NULL,
  `pendiente` BIT(1) NOT NULL,
  PRIMARY KEY (`idBackorder`),
  CONSTRAINT `backorders_ibfk_1`
    FOREIGN KEY (`cedCliente`)
    REFERENCES `ferreteria`.`clientes` (`cedula`),
  CONSTRAINT `backorders_ibfk_2`
    FOREIGN KEY (`cedEmpleado`)
    REFERENCES `ferreteria`.`planillas` (`cedula`),
  CONSTRAINT `backorders_ibfk_3`
    FOREIGN KEY (`idProducto`)
    REFERENCES `ferreteria`.`productos` (`idProducto`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `cedCliente` ON `ferreteria`.`backorders` (`cedCliente` ASC);

CREATE INDEX `cedEmpleado` ON `ferreteria`.`backorders` (`cedEmpleado` ASC);

CREATE INDEX `idProducto` ON `ferreteria`.`backorders` (`idProducto` ASC);


-- -----------------------------------------------------
-- Table `ferreteria`.`departamentos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`departamentos` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`departamentos` (
  `idDepartamento` INT(11) NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idDepartamento`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `ferreteria`.`departamentosxsedes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`departamentosxsedes` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`departamentosxsedes` (
  `idDxS` INT(11) NOT NULL AUTO_INCREMENT,
  `idSede` INT(11) NOT NULL,
  `idDepartamento` INT(11) NOT NULL,
  `cedula` INT(11) NOT NULL,
  PRIMARY KEY (`idDxS`),
  CONSTRAINT `departamentosxsedes_ibfk_1`
    FOREIGN KEY (`idSede`)
    REFERENCES `ferreteria`.`sedes` (`idSede`),
  CONSTRAINT `departamentosxsedes_ibfk_2`
    FOREIGN KEY (`idDepartamento`)
    REFERENCES `ferreteria`.`departamentos` (`idDepartamento`),
  CONSTRAINT `departamentosxsedes_ibfk_3`
    FOREIGN KEY (`cedula`)
    REFERENCES `ferreteria`.`planillas` (`cedula`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `idSede` ON `ferreteria`.`departamentosxsedes` (`idSede` ASC);

CREATE INDEX `idDepartamento` ON `ferreteria`.`departamentosxsedes` (`idDepartamento` ASC);

CREATE INDEX `cedula` ON `ferreteria`.`departamentosxsedes` (`cedula` ASC);


-- -----------------------------------------------------
-- Table `ferreteria`.`pedidos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`pedidos` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`pedidos` (
  `idPedido` INT(11) NOT NULL AUTO_INCREMENT,
  `fechaPedido` DATE NOT NULL,
  `cedCliente` INT(11) NOT NULL,
  `cedEmpleado` INT(11) NOT NULL,
  `aprobado` BIT(1) NOT NULL,
  PRIMARY KEY (`idPedido`),
  CONSTRAINT `pedidos_ibfk_1`
    FOREIGN KEY (`cedCliente`)
    REFERENCES `ferreteria`.`clientes` (`cedula`),
  CONSTRAINT `pedidos_ibfk_2`
    FOREIGN KEY (`cedEmpleado`)
    REFERENCES `ferreteria`.`planillas` (`cedula`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `cedCliente` ON `ferreteria`.`pedidos` (`cedCliente` ASC);

CREATE INDEX `cedEmpleado` ON `ferreteria`.`pedidos` (`cedEmpleado` ASC);


-- -----------------------------------------------------
-- Table `ferreteria`.`envios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`envios` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`envios` (
  `idEnvio` INT(11) NOT NULL AUTO_INCREMENT,
  `idSede` INT(11) NOT NULL,
  `destino` POLYGON NOT NULL,
  `idPedido` INT(11) NOT NULL,
  `kmRecorrido` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idEnvio`),
  CONSTRAINT `envios_ibfk_1`
    FOREIGN KEY (`idSede`)
    REFERENCES `ferreteria`.`sedes` (`idSede`),
  CONSTRAINT `envios_ibfk_2`
    FOREIGN KEY (`idPedido`)
    REFERENCES `ferreteria`.`pedidos` (`idPedido`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `idSede` ON `ferreteria`.`envios` (`idSede` ASC);

CREATE INDEX `idPedido` ON `ferreteria`.`envios` (`idPedido` ASC);


-- -----------------------------------------------------
-- Table `ferreteria`.`imagenes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`imagenes` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`imagenes` (
  `idImagen` INT(11) NOT NULL AUTO_INCREMENT,
  `imagen` LONGBLOB NOT NULL,
  `idProducto` INT(11) NOT NULL,
  PRIMARY KEY (`idImagen`),
  CONSTRAINT `imagenes_ibfk_1`
    FOREIGN KEY (`idProducto`)
    REFERENCES `ferreteria`.`productos` (`idProducto`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `idProducto` ON `ferreteria`.`imagenes` (`idProducto` ASC);


-- -----------------------------------------------------
-- Table `ferreteria`.`inventariosxsedes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`inventariosxsedes` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`inventariosxsedes` (
  `idIxS` INT(11) NOT NULL AUTO_INCREMENT,
  `idProducto` INT(11) NOT NULL,
  `idSede` INT(11) NOT NULL,
  `idDepartamento` INT NOT NULL,
  `cantidad` INT(11) NOT NULL,
  `pasillo` INT(11) NOT NULL,
  `estante` INT(11) NOT NULL,
  PRIMARY KEY (`idIxS`),
  CONSTRAINT `inventariosxsedes_ibfk_1`
    FOREIGN KEY (`idProducto`)
    REFERENCES `ferreteria`.`productos` (`idProducto`),
  CONSTRAINT `inventariosxsedes_ibfk_2`
    FOREIGN KEY (`idSede`)
    REFERENCES `ferreteria`.`sedes` (`idSede`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `idProducto` ON `ferreteria`.`inventariosxsedes` (`idProducto` ASC);

CREATE INDEX `idSede` ON `ferreteria`.`inventariosxsedes` (`idSede` ASC);


-- -----------------------------------------------------
-- Table `ferreteria`.`mensajes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`mensajes` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`mensajes` (
  `idMensaje` INT(11) NOT NULL AUTO_INCREMENT,
  `cedEmpleado` INT(11) NOT NULL,
  `cedCliente` INT(11) NOT NULL,
  `remitente` BIT(1) NOT NULL,
  `mensaje` VARCHAR(300) NOT NULL,
  `fechaEnvio` DATE NOT NULL,
  PRIMARY KEY (`idMensaje`),
  CONSTRAINT `mensajes_ibfk_1`
    FOREIGN KEY (`cedEmpleado`)
    REFERENCES `ferreteria`.`planillas` (`cedula`),
  CONSTRAINT `mensajes_ibfk_2`
    FOREIGN KEY (`cedCliente`)
    REFERENCES `ferreteria`.`clientes` (`cedula`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `cedEmpleado` ON `ferreteria`.`mensajes` (`cedEmpleado` ASC);

CREATE INDEX `cedCliente` ON `ferreteria`.`mensajes` (`cedCliente` ASC);


-- -----------------------------------------------------
-- Table `ferreteria`.`productosxpedidos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`productosxpedidos` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`productosxpedidos` (
  `idPxP` INT(11) NOT NULL AUTO_INCREMENT,
  `idPedido` INT(11) NOT NULL,
  `idProducto` INT(11) NOT NULL,
  `cantidadSolicitada` INT(11) NOT NULL,
  `cantidadRecibida` INT(11) NOT NULL,
  PRIMARY KEY (`idPxP`),
  CONSTRAINT `productosxpedidos_ibfk_1`
    FOREIGN KEY (`idPedido`)
    REFERENCES `ferreteria`.`pedidos` (`idPedido`),
  CONSTRAINT `productosxpedidos_ibfk_2`
    FOREIGN KEY (`idProducto`)
    REFERENCES `ferreteria`.`productos` (`idProducto`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `idPedido` ON `ferreteria`.`productosxpedidos` (`idPedido` ASC);

CREATE INDEX `idProducto` ON `ferreteria`.`productosxpedidos` (`idProducto` ASC);


-- -----------------------------------------------------
-- Table `ferreteria`.`vacacionesxempleado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`vacacionesxempleado` ;

CREATE TABLE IF NOT EXISTS `ferreteria`.`vacacionesxempleado` (
  `idVxE` INT(11) NOT NULL AUTO_INCREMENT,
  `cedEmpleado` INT(11) NOT NULL,
  `fechaSalida` DATE NOT NULL,
  `fechaRegreso` DATE NOT NULL,
  PRIMARY KEY (`idVxE`),
  CONSTRAINT `vacacionesxempleado_ibfk_1`
    FOREIGN KEY (`cedEmpleado`)
    REFERENCES `ferreteria`.`planillas` (`cedula`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `cedEmpleado` ON `ferreteria`.`vacacionesxempleado` (`cedEmpleado` ASC);

USE `ferreteria` ;

-- -----------------------------------------------------
-- procedure usp_InsertarAmonestaciones
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarAmonestaciones`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarAmonestaciones`(
	tipo VARCHAR(50),
    diasSuspendido INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
	IF NOT EXISTS(
				  SELECT amonestaciones.tipo
				  FROM amonestaciones
				  WHERE amonestaciones.tipo = tipo
				 )
		THEN
			INSERT INTO amonestaciones(tipo,diasSuspendido) VALUES (tipo,diasSuspendido);
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'La Amonestacion que desea ingresar ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertarAspectosTecnicos
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarAspectosTecnicos`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarAspectosTecnicos`(
	aspecto VARCHAR(100)
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
    IF NOT EXISTS(
				  SELECT aspectosTecnicos.idAspectoT
				  FROM aspectosTecnicos
				  WHERE aspectosTecnicos.aspecto = aspecto
				 )
		THEN
			INSERT INTO aspectosTecnicos(aspecto) 
            VALUES (aspecto);
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El aspecto técnico que desea ingresar ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ModificarAspectosTecnicos
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ModificarAspectosTecnicos`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ModificarAspectosTecnicos`(
	idAspecto INT,
	nuevoaspecto VARCHAR(100)
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE aspecto VARCHAR(100);
    
    SET aspecto = (SELECT aspectostecnicos.aspecto FROM aspectostecnicos WHERE aspectostecnicos.idAspectoT = idAspecto);
    
    SET nuevoaspecto = IFNULL(nuevoaspecto,aspecto);
    
    IF EXISTS(
				  SELECT aspectosTecnicos.aspecto
				  FROM aspectosTecnicos
				  WHERE aspectosTecnicos.idAspectoT = idAspecto
				 )
		THEN
			UPDATE aspectostecnicos SET aspectostecnicos.aspecto = nuevoaspecto 
            WHERE aspectostecnicos.idAspectoT = idAspecto;
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El aspecto técnico no se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_EliminarAspectosTecnicos
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_EliminarAspectosTecnicos`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_EliminarAspectosTecnicos`(
	idAspecto INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
    IF EXISTS(
				  SELECT aspectosTecnicos.aspecto
				  FROM aspectosTecnicos
				  WHERE aspectosTecnicos.idAspectoT = idAspecto
				 )
		THEN
			DELETE FROM aspectostecnicos WHERE aspectostecnicos.idAspectoT = idAspecto;
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El aspecto técnico no se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerAspectosTecnicos
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerAspectosTecnicos`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerAspectosTecnicos`()
BEGIN

	SELECT aspectostecnicos.idAspectoT AS 'idAspecto', aspectostecnicos.aspecto AS 'AspectoTecnico'
    FROM aspectostecnicos;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertarAspectosXProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarAspectosXProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarAspectosXProducto`(
	aspecto VARCHAR(100),
    nombreProducto VARCHAR(50)
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE idAspecto INT;
    DECLARE idProducto INT;
    
    SET idProducto = (SELECT productos.idProducto FROM productos WHERE productos.nombre = nombreProducto);
    SET idAspecto = (SELECT aspectosTecnicos.idAspectoT FROM aspectosTecnicos WHERE aspectosTecnicos.aspecto = aspecto);
    
    IF NOT EXISTS(
				  SELECT aspectosXproductos.idAxP
				  FROM aspectosXproductos
				  WHERE aspectosXproductos.idAspectoT = idAspecto AND
                  aspectosXproductos.idProducto = idProducto
				 )
		THEN
			INSERT INTO aspectosXproductos(idAspectoT,idProducto) 
            VALUES (idAspecto,idProducto);
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El aspecto técnico del producto que desea ingresar ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ModificarAspectosXProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ModificarAspectosXProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ModificarAspectosXProducto`(
	idAxP INT,
	nuevoidAspecto INT,
    nuevoidProducto INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE idAspecto INT;
    DECLARE idProducto INT;
    
    SET idAspecto = (SELECT aspectosxproductos.idAspectoT FROM aspectosxproductos WHERE aspectosxproductos.idAxP = idAxP);
    SET idProducto = (SELECT aspectosxproductos.idProducto FROM aspectosxproductos WHERE aspectosxproductos.idAxP = idAxP);
    
    SET nuevoidAspecto = IFNULL(nuevoidAspecto, idAspecto);
    SET nuevoidProducto = IFNULL(nuevoidProducto, idProducto);
    
    IF EXISTS(
				  SELECT aspectosxproductos.idAspectoT
				  FROM aspectosxproductos
				  WHERE aspectosxproductos.idAxP = idAxP
				 )
		THEN
			UPDATE aspectosxproductos SET aspectosxproductos.idAspectoT = nuevoidAspecto, aspectosxproductos.idProducto = nuevoidProducto
            WHERE aspectosxproductos.idAxP = idAxP;
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El aspecto técnico no se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_EliminarAspectosXProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_EliminarAspectosXProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_EliminarAspectosXProducto`(
	idAxP INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
    IF EXISTS(
				  SELECT aspectosxproductos.idAspectoT
				  FROM aspectosxproductos
				  WHERE aspectosxproductos.idAxP = idAxP
				 )
		THEN
			DELETE FROM aspectosxproductos WHERE aspectosxproductos.idAxP = idAxP;
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El aspecto técnico no se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerAspectosXProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerAspectosXProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerAspectosXProducto`()
BEGIN

	SELECT aspectosxproductos.idAxP AS'idAxS', productos.nombre AS 'NombreProducto', aspectostecnicos.aspecto AS 'Aspectotecnico'
    FROM aspectosxproductos
    INNER JOIN productos ON (productos.idProducto = aspectosxproductos.idProducto)
    INNER JOIN aspectostecnicos ON (aspectostecnicos.idAspectoT = aspectosxproductos.idAspectoT);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerAspectosDeProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerAspectosDeProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerAspectosDeProducto`(
	idProducto INT
)
BEGIN

	SELECT aspectosxproductos.idAxP AS 'idAxP', productos.nombre AS 'NombreProducto', aspectostecnicos.aspecto AS 'AspectoTecnico'
    FROM aspectosxproductos
    INNER JOIN productos ON (productos.idProducto = aspectosxproductos.idProducto)
    INNER JOIN aspectostecnicos ON (aspectostecnicos.idAspectoT = aspectosxproductos.idAspectoT)
    WHERE aspectosxproductos.idProducto = idProducto;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerAspectosProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerAspectosProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerAspectosProducto`(
	idAspecto INT
)
BEGIN

	SELECT aspectosxproductos.idAxP AS 'idAxP', productos.nombre AS 'NombreProducto', aspectostecnicos.aspecto AS 'AspectoTecnico'
    FROM aspectosxproductos
    INNER JOIN productos ON (productos.idProducto = aspectosxproductos.idProducto)
    INNER JOIN aspectostecnicos ON (aspectostecnicos.idAspectoT = aspectosxproductos.idAspectoT)
    WHERE aspectosxproductos.idAspectoT = idAspecto;

END$$

DELIMITER ;
-- -----------------------------------------------------
-- procedure usp_InsertarBackorder
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarBackorder`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarBackorder`(
	nombreCliente VARCHAR(50),
    correoCliente VARCHAR(100),
    nombreEmpleado VARCHAR(50),
    nombreProducto VARCHAR(50),
    cantidad INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE cedCliente INT;
    DECLARE cedEmpleado INT;
    DECLARE idProducto INT;
    
    SET cedCliente = (SELECT clientes.cedula FROM clientes WHERE clientes.nombre = nombreCliente AND clientes.correo = correo);
    SET cedEmpleado = (SELECT planillas.cedula FROM planillas WHERE planillas.nombre = nombreEmpleado);
    SET idProducto = (SELECT productos.idProducto FROM productos WHERE productos.nombre = nombreProducto);
    
	IF NOT EXISTS(
				  SELECT backorders.idBackorder
				  FROM backorders
				  WHERE backorders.cedCliente = cedCliente AND
                  backorders.cedEmpleado = cedEmpleado AND
                  backorders.idProducto = idProducto
				 )
		THEN
			INSERT INTO backorders(cedCliente,cedEmpleado,idProducto,cantidad,pendiente) 
            VALUES (cedCliente,cedEmpleado,idProducto,cantidad,1);
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El producto que desea ingresar en el backorder ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ModificarBackorder
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ModificarBackorder`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ModificarBackorder`(
	idBackorder INT,
    cedCliente INT,
    nuevacedEmpleado INT,
    nuevoidProducto INT,
    nuevacantidad INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE cedEmpleado INT;
    DECLARE idProducto INT;
    DECLARE cantidad INT;
    
    SET cedEmpleado = (SELECT backorders.cedEmpleado FROM backorders WHERE backorders.cedCliente = cedCliente AND backorders.idBackorder);
    SET idProducto = (SELECT backorders.idProducto FROM backorders WHERE backorders.cedCliente = cedCliente AND backorders.idBackorder);
    SET cantidad = (SELECT backorders.cantidad FROM backorders WHERE backorders.cedCliente = cedCliente AND backorders.idBackorder);
    
    SET nuevacedEmpleado = IFNULL(nuevacedEmpleado,cedEmpleado);
    SET nuevoidProducto = IFNULL(nuevoidProducto,idProducto);
    SET nuevacantidad = IFNULL(nuevacantidad,cantidad);
    
	IF NOT EXISTS(
				  SELECT backorders.idProducto
				  FROM backorders
				  WHERE backorders.idBackorder = idBackorder
				 )
		THEN
			UPDATE backorders SET backorders.cedEmpleado = nuevacedEmpleado, backorders.idProducto = nuevoidProducto, backorders.cantidad = nuevacantidad
            WHERE backorders.idBackorder = idBackorder;
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El producto que desea ingresar en el backorder ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_EliminarBackorder
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_EliminarBackorder`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_EliminarBackorder`(
	idBackorder INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
	IF EXISTS(
				  SELECT backorders.idProducto
				  FROM backorders
				  WHERE backorders.idBackorder = idBackorder
				 )
		THEN
			DELETE FROM backorders WHERE backorders.idBackorder = idBackorder;
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El backorder no se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerBackorder
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerBackorder`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerBackorder`()
BEGIN
	
    SELECT backorders.idBackorder AS 'idBackorder', CONCAT(clientes.nombre, ' ', clientes.apellidoP, ' ' , clientes.apellidoM) AS 'NombreCliente', CONCAT(planillas.nombre, ' ', planillas.apellidoP, ' ', planillas.apellidoM) AS 'NombreEmpleado',
    productos.nombre AS 'NombreProducto', backorders.cantidad AS 'Cantidad', backorders.pendiente AS 'Pendiente'
    FROM backorders
    INNER JOIN clientes ON (clientes.cedula = backorders.cedCliente)
    INNER JOIN planillas ON (planillas.cedula = backorders.cedEmpleado)
    INNER JOIN productos ON (productos.idProducto = backorders.idProducto);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerBackorderXCliente
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerBackorderXCliente`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerBackorderXCliente`(
	cedCliente INT
)
BEGIN
	
    SELECT backorders.idBackorder AS 'idBackorder', CONCAT(clientes.nombre, ' ', clientes.apellidoP, ' ' , clientes.apellidoM) AS 'NombreCliente', CONCAT(planillas.nombre, ' ', planillas.apellidoP, ' ', planillas.apellidoM) AS 'NombreEmpleado',
    productos.nombre AS 'NombreProducto', backorders.cantidad AS 'Cantidad', backorders.pendiente AS 'Pendiente'
    FROM backorders
    INNER JOIN clientes ON (clientes.cedula = backorders.cedCliente)
    INNER JOIN planillas ON (planillas.cedula = backorders.cedEmpleado)
    INNER JOIN productos ON (productos.idProducto = backorders.idProducto)
    WHERE backorders.cedCliente = cedCliente;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerBackorderXEmpleado
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerBackorderXEmpleado`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerBackorderXEmpleado`(
	cedEmpleado INT
)
BEGIN
	
    SELECT backorders.idBackorder AS 'idBackorder', CONCAT(clientes.nombre, ' ', clientes.apellidoP, ' ' , clientes.apellidoM) AS 'NombreCliente', CONCAT(planillas.nombre, ' ', planillas.apellidoP, ' ', planillas.apellidoM) AS 'NombreEmpleado',
    productos.nombre AS 'NombreProducto', backorders.cantidad AS 'Cantidad', backorders.pendiente AS 'Pendiente'
    FROM backorders
    INNER JOIN clientes ON (clientes.cedula = backorders.cedCliente)
    INNER JOIN planillas ON (planillas.cedula = backorders.cedEmpleado)
    INNER JOIN productos ON (productos.idProducto = backorders.idProducto)
    WHERE backorders.cedEmpleado = cedEmpleado;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerBackorderXProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerBackorderXProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerBackorderXProducto`(
	idProducto INT
)
BEGIN
	
    SELECT backorders.idBackorder AS 'idBackorder', CONCAT(clientes.nombre, ' ', clientes.apellidoP, ' ' , clientes.apellidoM) AS 'NombreCliente', CONCAT(planillas.nombre, ' ', planillas.apellidoP, ' ', planillas.apellidoM) AS 'NombreEmpleado',
    productos.nombre AS 'NombreProducto', backorders.cantidad AS 'Cantidad', backorders.pendiente AS 'Pendiente'
    FROM backorders
    INNER JOIN clientes ON (clientes.cedula = backorders.cedCliente)
    INNER JOIN planillas ON (planillas.cedula = backorders.cedEmpleado)
    INNER JOIN productos ON (productos.idProducto = backorders.idProducto)
    WHERE backorders.idProducto = idProducto;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertarClientes
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarClientes`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarClientes`(
	cedula INT,
	nombre VARCHAR(50),
	apellidoP VARCHAR(50),
	apellidoM VARCHAR(50),
	correo VARCHAR(100),
	numero VARCHAR(9)
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
	IF NOT EXISTS(
				  SELECT clientes.cedula
				  FROM clientes
				  WHERE clientes.cedula = cedula AND
                  clientes.nombre = nombre AND
                  clientes.apellidoP = apellidoP AND
                  clientes.apellidoM = apellidoM AND
                  clientes.correo = correo
				 )
		THEN
			INSERT INTO clientes(cedula,nombre,apellidoP,apellidoM,correo,numero) 
            VALUES (cedula,nombre,apellidoP,apellidoM,correo,numero);
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El cliente que desea ingresar ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ModificarClientes
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ModificarClientes`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ModificarClientes`(
	cedula INT,
	nuevonombre VARCHAR(50),
	nuevoapellidoP VARCHAR(50),
	nuevoapellidoM VARCHAR(50),
	nuevocorreo VARCHAR(100),
	nuevonumero VARCHAR(9)
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE nombre VARCHAR(50);
	DECLARE apellidoP VARCHAR(50);
	DECLARE apellidoM VARCHAR(50);
	DECLARE correo VARCHAR(100);
	DECLARE numero VARCHAR(9);
    
    SET nombre = (SELECT clientes.nombre FROM clientes WHERE clientes.cedula = cedula);
    SET apellidoP = (SELECT clientes.apellidoP FROM clientes WHERE clientes.cedula = cedula);
    SET apellidoM = (SELECT clientes.apellidoM FROM clientes WHERE clientes.cedula = cedula);
    SET correo = (SELECT clientes.correo FROM clientes WHERE clientes.cedula = cedula);
    SET numero = (SELECT clientes.numero FROM clientes WHERE clientes.cedula = cedula);
    
    SET nuevonombre = IFNULL(nuevonombre, nombre);
	SET nuevoapellidoP = IFNULL(nuevoapellidoP, apellidoP);
	SET nuevoapellidoM = IFNULL(nuevoapellidoM, apellidoM);
	SET nuevocorreo = IFNULL(nuevocorreo, correo);
	SET nuevonumero = IFNULL(nuevonumero, numero);
    
	IF EXISTS(
				  SELECT clientes.nombre
				  FROM clientes
				  WHERE clientes.cedula = cedula
				 )
		THEN
			UPDATE clientes SET clientes.nombre = nuevonombre, clientes.apellidoP = nuevoapellidoP, clientes.apellidoM = nuevoapellidoM,
            clientes.correo = nuevocorreo, clientes.numero = nuevonumero
            WHERE clientes.cedula = cedula;
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El cliente no se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_EliminarClientes
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_EliminarClientes`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_EliminarClientes`(
	cedula INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
	IF EXISTS(
				  SELECT clientes.nombre
				  FROM clientes
				  WHERE clientes.cedula = cedula
				 )
		THEN
			DELETE FROM clientes WHERE clientes.cedula = cedula;
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El cliente no se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerClientes
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerClientes`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerClientes`()
BEGIN

	SELECT clientes.cedula, clientes.nombre, clientes.apellidoP, clientes.apellidoM, clientes.correo, clientes.numero
	FROM clientes;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerCliente
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerCliente`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerCliente`(
	cedCliente INT
)
BEGIN

	SELECT clientes.cedula, clientes.nombre, clientes.apellidoP, clientes.apellidoM, clientes.correo, clientes.numero
	FROM clientes
    WHERE clientes.cedula = cedCliente;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertarDepartamento
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarDepartamento`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarDepartamento`(
	nombre VARCHAR(50),
    nombreSede VARCHAR(50)
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE idSede INT;
    DECLARE idDepartamento INT;
    
    SET IdSede = (SELECT sedes.idSede FROM sedes WHERE sedes.nombre = nombreSede);
    
	IF NOT EXISTS(
				  SELECT departamentos.idDepartamento
				  FROM departamentos
				  WHERE LOWER(departamentos.nombre)=LOWER(nombre)
				 )
		THEN
			INSERT INTO departamentos(nombre) VALUES (nombre);
            
            SET idDepartamento = (SELECT departamentos.idDepartamento FROM departamentos WHERE departamentos.nombre = nombre);
            
            IF NOT EXISTS(
				  SELECT departamentosXsedes.idDxS
				  FROM departamentosXsedes
				  WHERE departamentosXsedes.idSede = idSede AND
                  departamentosXsedes.idDepartamento = idDepartamento
				 )
			THEN
				INSERT INTO departamentosXsedes(idSede,idDepartamento,cedula) VALUES (idSede,idDepartamento,0);
			
            ELSE
				SIGNAL SQLSTATE '45000';
				SET msgError = 'El departamento que desea ingresar en la sede ya se encuentra en el sistema.';
			END IF;
            
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El departamento que desea ingresar ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ModificarDepartamento
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ModificarDepartamento`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ModificarDepartamento`(
	idDepartamento INT,
	nuevonombre VARCHAR(50)
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE nombre VARCHAR(50);
    
    SET nombre = (SELECT departamentos.nombre FROM departamentos WHERE departamentos.idDepartamento = idDepartamento);
    
    SET nuevonombre = IFNULL(nuevonombre,nombre);
    
	IF EXISTS(SELECT departamentos.nombre
			  FROM departamentos
			  WHERE departamentos.idDepartamento = idDepartamento
			  )
		THEN
			
            UPDATE departamentos SET departamentos.nombre = nuevonombre
            WHERE departamentos.idDepartamento = idDepartamento;
            
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El departamento no se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_EliminarDepartamento
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_EliminarDepartamento`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_EliminarDepartamento`(
	idDepartamento INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
	IF EXISTS(SELECT departamentos.nombre
			  FROM departamentos
			  WHERE departamentos.idDepartamento = idDepartamento
			  )
		THEN
			
           DELETE FROM departamentos WHERE departamentos.idDepartamento = idDepartamento;
           
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El departamento no se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerDepartamentos
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerDepartamentos`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerDepartamentos`()
BEGIN

	SELECT departamentos.idDepartamento, departamentos.nombre AS 'NombreDepartamento', sedes.nombre AS 'NombreSede'
    FROM departamentos
    INNER JOIN departamentosxsedes ON (departamentosxsedes.idDepartamento = departamentos.idDepartamento)
    INNER JOIN sedes ON (sedes.idSede = departamentosxsedes.idSede);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerDepartamento
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerDepartamento`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerDepartamento`(
	idDepartamento INT
)
BEGIN

	SELECT departamentos.idDepartamento, departamentos.nombre AS 'NombreDepartamento', sedes.nombre AS 'NombreSede'
    FROM departamentos
    INNER JOIN departamentosxsedes ON (departamentosxsedes.idDepartamento = departamentos.idDepartamento)
    INNER JOIN sedes ON (sedes.idSede = departamentosxsedes.idSede)
    WHERE departamentos.idDepartamento = idDepartamento;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_AsignarExperto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_AsignarExperto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_AsignarExperto`(
	idDepartamento INT,
    idSede INT,
    cedEmpleado INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
	IF EXISTS(SELECT departamentos.nombre
			  FROM departamentos
			  WHERE departamentos.idDepartamento = idDepartamento
			  )
		THEN
			
            IF EXISTS(SELECT planillas.nombre 
                      FROM planillas
                      WHERE planillas.cedula = cedEmpleado AND 
                      planillas.idSede = idSede)
			THEN
            
            UPDATE departamentosxsedes SET departamentosxsedes.cedula = cedEmpleado
            WHERE departamentosxsedes.idSede = idSede AND departamentosxsedes.idDepartamento = idDepartamento;
            
            ELSE
            
				SIGNAL SQLSTATE '45000';
				SET msgError = 'El empleado no se encuentra registrado en esa sede.';
            
            END IF;
            
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El departamento no se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertarEnPlantilla
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarEnPlantilla`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarEnPlantilla`(
	cedula INT,
	nombre VARCHAR(50),
    apellidoP VARCHAR(50),
    apellidoM VARCHAR(50),
    nombreSede VARCHAR(50)
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE idSede INT;
    
    SET idSede = (SELECT sedes.idSede FROM sedes WHERE sedes.nombre = nombreSede);
    
	IF NOT EXISTS(
				  SELECT planillas.nombre
				  FROM planillas
				  WHERE planillas.cedula = cedula AND
                  planillas.nombre = nombre AND
                  planillas.apellidoP = apellidoP AND
                  planillas.apellidoM = apellidoM
				 )
		THEN
			INSERT INTO planillas(cedula,nombre,apellidoP,apellidoM,idSede,fechaContratado,estado) 
            VALUES (cedula,nombre,apellidoP,apellidoM,idSede,CURDATE(),1);
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El empleado que desea ingresar ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ModificarEnPlantilla
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ModificarEnPlantilla`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ModificarEnPlantilla`(
	cedula INT,
	nuevonombre VARCHAR(50),
    nuevoapellidoP VARCHAR(50),
    nuevoapellidoM VARCHAR(50),
    nuevafechaContratado DATE,
    nuevoestado INT,
    nuevoidSede INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE nombre VARCHAR(50);
    DECLARE apellidoP VARCHAR(50);
    DECLARE apellidoM VARCHAR(50);
    DECLARE fechaContratado DATE;
    DECLARE estado INT;
    DECLARE idSede INT;
    
    SET nombre = (SELECT planillas.nombre FROM planillas WHERE planillas.cedula = cedula);
    SET apellidoP = (SELECT planillas.apellidoP FROM planillas WHERE planillas.cedula = cedula);
    SET apellidoM = (SELECT planillas.apellidoM FROM planillas WHERE planillas.cedula = cedula);
    SET fechaContratado = (SELECT planillas.fechaContratado FROM planillas WHERE planillas.cedula = cedula);
    SET estado = (SELECT planillas.estado FROM planillas WHERE planillas.cedula = cedula);
    SET idSede = (SELECT planillas.idSede FROM planillas WHERE planillas.cedula = cedula);
    
    SET nuevonombre = IFNULL(nuevonombre, nombre);
    SET nuevoapellidoP = IFNULL(nuevoapellidoP, apellidoP);
    SET nuevoapellidoM = IFNULL(nuevoapellidoM, apellidoM);
    SET nuevafechaContratado = IFNULL(nuevafechaContratado, fechaContratado);
    SET nuevoestado = IFNULL(nuevoestado, estado);
    SET nuevoidSede = IFNULL(nuevoidSede, idSede);
    
	IF EXISTS(
				  SELECT planillas.nombre
				  FROM planillas
				  WHERE planillas.cedula = cedula
				 )
		THEN
			
            UPDATE planillas SET planillas.nombre = nuevonombre, planillas.apellidoP = nuevoapellidoP, planillas.apellidoM = nuevoapellidoM, planillas.fechaContratado = nuevafechaContratado,
            planillas.estado = nuevoestado, planillas.idSede = nuevoidSede
            WHERE planillas.cedula = cedula;
            
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El empleado no se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_EliminarEnPlantilla
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_EliminarEnPlantilla`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_EliminarEnPlantilla`(
	cedula INT
)
BEGIN
    
    DECLARE msgError VARCHAR(100);
    
	IF EXISTS(
				  SELECT planillas.nombre
				  FROM planillas
				  WHERE planillas.cedula = cedula
				 )
		THEN
			
            DELETE FROM planillas WHERE planillas.cedula = cedula;
            
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El empleado no se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerPlantilla
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerPlantilla`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerPlantilla`()
BEGIN
    
	SELECT planillas.cedula, planillas.nombre, planillas.apellidoP, planillas.apellidoM, planillas.fechaContratado, planillas.estado,
    sedes.nombre AS 'NombreSede'
    FROM planillas
    INNER JOIN sedes ON (sedes.idSede = planillas.idSede);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerPlantillaXSede
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerPlantillaXSede`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerPlantillaXSede`(
	idSede INT
)
BEGIN
    
	SELECT planillas.cedula, planillas.nombre, planillas.apellidoP, planillas.apellidoM, planillas.fechaContratado, planillas.estado,
    sedes.nombre AS 'NombreSede'
    FROM planillas
    INNER JOIN sedes ON (sedes.idSede = planillas.idSede)
    WHERE planillas.idSede = idSede;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerEmpleado
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerEmpleado`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerEmpleado`(
	cedula INT
)
BEGIN
    
	SELECT planillas.cedula, planillas.nombre, planillas.apellidoP, planillas.apellidoM, planillas.fechaContratado, planillas.estado,
    sedes.nombre AS 'NombreSede'
    FROM planillas
    INNER JOIN sedes ON (sedes.idSede = planillas.idSede)
    WHERE planillas.cedula = cedula;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertarImagenProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarImagenProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarImagenProducto`(
	imagen LONGBLOB,
    nombreProducto VARCHAR(50)
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE idProducto INT;
    
    SET idProducto = (SELECT productos.idProducto FROM productos WHERE productos.nombre = nombreProducto);
    
	INSERT INTO imagenes(imagen,idProducto) 
    VALUES (imagen,idProducto);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ModificarImagenProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ModificarImagenProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ModificarImagenProducto`(
	idImagen INT,
    idProducto INT,
	nuevaimagen LONGBLOB
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE imagen LONGBLOB;
    
    SET imagen = (SELECT imagenes.imagen FROM imagenes WHERE imagenes.idProducto = idProducto AND 
				  imagenes.idImagen = idImagen);
                  
	SET nuevaimagen = IFNULL(nuevaimagen,imagen);
    
	IF EXISTS(SELECT imagenes.imagen
			  FROM imagenes 
              WHERE imagenes.idImagen = idImagen)
    THEN
		UPDATE imagenes SET imagenes.imagen = nuevaimagen WHERE imagenes.idImagen = idImagen;
    ELSE
		SIGNAL SQLSTATE '45000';
		SET msgError = 'La imagen no se encuentra en el sistema.';
    END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_EliminarImagenProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_EliminarImagenProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_EliminarImagenProducto`(
	idImagen INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
	IF EXISTS(SELECT imagenes.imagen
			  FROM imagenes 
              WHERE imagenes.idImagen = idImagen)
    THEN
		DELETE FROM imagenes WHERE imagenes.idImagen = idImagen;
    ELSE
		SIGNAL SQLSTATE '45000';
		SET msgError = 'La imagen no se encuentra en el sistema.';
    END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerImagenProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerImagenProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerImagenProducto`()
BEGIN

	SELECT imagenes.idImagen, productos.nombre, imagenes.imagen
    FROM imagenes
    INNER JOIN productos ON (productos.idProducto = imagenes.idProducto);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerImagenXProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerImagenXProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerImagenXProducto`(
	idProducto INT
)
BEGIN

	SELECT imagenes.idImagen, productos.nombre, imagenes.imagen
    FROM imagenes
    INNER JOIN productos ON (productos.idProducto = imagenes.idProducto)
    WHERE imagenes.idProducto = idProducto;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertarInventarioXSedes
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarInventarioXSedes`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarInventarioXSedes`(
	nombreSede VARCHAR(100),
    nombreDepartamento VARCHAR(50),
    nombreProducto VARCHAR(50),
    cantidad INT,
    pasillo INT,
    estante INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE idSede INT;
    DECLARE idProducto INT;
    DECLARE idDepartamento INT;
    
    SET idProducto = (SELECT productos.idProducto FROM productos WHERE productos.nombre = nombreProducto);
    SET idSede = (SELECT sedes.idSede FROM sedes WHERE sedes.nombre = nombreSede);
    SET idDepartamento = (SELECT departamentos.idDepartamento FROM departamentos WHERE departamentos.nombre = nombreDepartamento);
    
    IF EXISTS(SELECT  departamentosXsedes.idDxS
			  FROM departamentosXsedes 
              WHERE departamentosXsedes.idSede = idSede
              AND departamentosXsedes.idDepartamento = idDepartamento)
    THEN
		IF NOT EXISTS(
					  SELECT inventariosXsedes.idIxS
					  FROM inventariosXsedes
					  WHERE inventariosXsedes.idSede = idSede AND
					  inventariosXsedes.idProducto = idProducto
					 )
			THEN
				IF(pasillo <= 4)
                THEN
					INSERT INTO inventariosXsedes(idProducto,idSede,idDepartamento,cantidad,pasillo,estante) 
					VALUES (idProducto,idSede,idDepartamento,cantidad,pasillo,estante);
				ELSE
					SIGNAL SQLSTATE '45000';
					SET msgError = 'Solamente existen 4 pasillos.';
                END IF;
		ELSE
			SIGNAL SQLSTATE '45000';
			SET msgError = 'El producto de la sede que desea ingresar ya se encuentra en el sistema.';
		END IF;
	ELSE
		SIGNAL SQLSTATE '45000';
		SET msgError = 'El departamento no existe en esa sede.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ModificarInventarioXSedes
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarInventarioXSedes`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarInventarioXSedes`(
	idIxS INT,
	nuevoidSede INT,
    nuevoidDepartamento INT,
    nuevoidProducto INT,
    nuevacantidad INT,
    nuevopasillo INT,
    nuevoestante INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE idSede INT;
    DECLARE idDepartamento INT;
    DECLARE idProducto INT;
    DECLARE cantidad INT;
    DECLARE pasillo INT;
    DECLARE estante INT;
    
    SET idProducto = (SELECT inventariosxsedes.idProducto FROM inventariosxsedes WHERE inventariosxsedes.idIxS = idIxS);
    SET idSede = (SELECT inventariosxsedes.idSede FROM inventariosxsedes WHERE inventariosxsedes.idIxS = idIxS);
    SET idDepartamento = (SELECT inventariosxsedes.idDepartamento FROM inventariosxsedes WHERE inventariosxsedes.idIxS = idIxS);
    SET cantidad = (SELECT inventariosxsedes.cantidad FROM inventariosxsedes WHERE inventariosxsedes.idIxS = idIxS);
    SET pasillo = (SELECT inventariosxsedes.pasillo FROM inventariosxsedes WHERE inventariosxsedes.idIxS = idIxS);
    SET estante = (SELECT inventariosxsedes.estante FROM inventariosxsedes WHERE inventariosxsedes.idIxS = idIxS);
    
    SET nuevoidSede = IFNULL(nuevoidSede, idSede);
    SET nuevoidDepartamento = IFNULL(nuevoidDepartamento, idDepartamento);
    SET nuevoidProducto = IFNULL(nuevoidProducto, idProducto);
    SET nuevacantidad = IFNULL(nuevacantidad, cantidad);
    SET nuevopasillo = IFNULL(nuevopasillo, pasillo);
    SET nuevoestante = IFNULL(nuevoestante, estante);    
    
    IF EXISTS(SELECT  inventariosxsedes.idProducto
			  FROM inventariosxsedes 
              WHERE inventariosxsedes.idIxS = idIxS)
    THEN
		
        UPDATE inventariosxsedes SET inventariosxsedes.idSede = nuevoidSede, inventariosxsedes.idDepartamento = nuevoidDepartamento, inventariosxsedes.idProducto = nuevoidProducto,
        inventariosxsedes.cantidad = nuevacantidad, inventariosxsedes.pasillo = nuevopasillo, inventariosxsedes.estante = nuevoestante
        WHERE inventariosxsedes.idIxS = idIxS;
        
	ELSE
		SIGNAL SQLSTATE '45000';
		SET msgError = 'El inventario no existe en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_EliminarInventarioXSedes
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_EliminarInventarioXSedes`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_EliminarInventarioXSedes`(
	idIxS INT
)
BEGIN

	DECLARE msgError VARCHAR(255);   
    
    IF EXISTS(SELECT  inventariosxsedes.idProducto
			  FROM inventariosxsedes 
              WHERE inventariosxsedes.idIxS = idIxS)
    THEN
		
        DELETE FROM inventariosxsedes WHERE inventariosxsedes.idIxS = idIxS;
        
	ELSE
		SIGNAL SQLSTATE '45000';
		SET msgError = 'El departamento no existe en esa sede.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerInventario
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerInventario`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerInventario`()
BEGIN

	SELECT productos.nombre AS 'NombreProducto', sedes.nombre AS 'NombreSede', departamentos.nombre AS 'NombreDepartamento',
    inventariosxsedes.cantidad AS 'Cantidad', inventariosxsedes.pasillo AS 'Pasillo', inventariosxsedes.estante AS 'Estante'
    FROM inventariosxsedes
    INNER JOIN productos ON (productos.idProducto = inventariosxsedes.idProducto)
    INNER JOIN sedes ON (sedes.idSede = inventariosxsedes.idSede)
    INNER JOIN departamentos ON (departamentos.idDepartamento = inventariosxsedes.idDepartamento);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerInventarioXSede
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerInventarioXSede`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerInventarioXSede`(
	idSede INT
)
BEGIN

	SELECT productos.nombre AS 'NombreProducto', sedes.nombre AS 'NombreSede', departamentos.nombre AS 'NombreDepartamento',
    inventariosxsedes.cantidad AS 'Cantidad', inventariosxsedes.pasillo AS 'Pasillo', inventariosxsedes.estante AS 'Estante'
    FROM inventariosxsedes
    INNER JOIN productos ON (productos.idProducto = inventariosxsedes.idProducto)
    INNER JOIN sedes ON (sedes.idSede = inventariosxsedes.idSede)
    INNER JOIN departamentos ON (departamentos.idDepartamento = inventariosxsedes.idDepartamento)
    WHERE inventariosxsedes.idSede = idSede;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertarMarcas
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarMarcas`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarMarcas`(
	nombre VARCHAR(50)
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
	IF NOT EXISTS(
				  SELECT marcas.idMarca
				  FROM marcas
				  WHERE marcas.nombre = nombre
				 )
		THEN
			INSERT INTO marcas(nombre) VALUES (nombre);
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'La marca que desea ingresar ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ModificarMarca
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ModificarMarca`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ModificarMarca`(
	idMarca INT,
    nuevonombreMarca VARCHAR(50)
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE nombreMarca VARCHAR(50);
    
    SET nombreMarca = (SELECT marcas.nombre FROM marcas WHERE marcas.idMarca = idMarca);
    
    SET nuevonombreMarca = IFNULL(nuevonombreMarca, nombreMarca);   
    
    IF EXISTS(SELECT  marcas.nombre
			  FROM marcas 
              WHERE marcas.idMarca = idMarca)
    THEN
		
        UPDATE marcas SET marcas.nombre = nuevonombreMarca
        WHERE marcas.idMarca = idMarca;
        
	ELSE
		SIGNAL SQLSTATE '45000';
		SET msgError = 'La marca no existe en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_EliminarMarca
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_EliminarMarca`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_EliminarMarca`(
	idMarca INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
   
	IF EXISTS(SELECT  marcas.nombre
			  FROM marcas 
              WHERE marcas.idMarca = idMarca)
    THEN
		
        DELETE FROM marcas WHERE marcas.idMarca = idMarca;
        
	ELSE
		SIGNAL SQLSTATE '45000';
		SET msgError = 'La marca no existe en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertarMensaje
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarMensaje`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarMensaje`(
	nombreCliente VARCHAR(50),
    correoCliente VARCHAR(100),
    nombreEmpleado VARCHAR(50),
    remitente VARCHAR(50),
    mensaje VARCHAR(300)
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE cedCliente INT;
    DECLARE cedEmpleado INT;
    DECLARE idProducto INT;
    DECLARE cedremitente iNT;
    
    SET cedCliente = (SELECT clientes.cedula FROM clientes WHERE clientes.nombre = nombreCliente AND clientes.correo = correo);
    SET cedEmpleado = (SELECT planillas.cedula FROM planillas WHERE planillas.nombre = nombreEmpleado);
    SET cedremitente = (SELECT planillas.cedula FROM planillas WHERE planillas.nombre = remitente);
    
	IF NOT EXISTS(
				  SELECT mensajes.idMensaje
				  FROM mensajes
				  WHERE mensajes.cedCliente = cedCliente AND
                  mensajes.cedEmpleado = cedEmpleado
				 )
		THEN
			IF cedremitente = cedEmpleado
            THEN
				INSERT INTO mensajes(cedCliente,cedEmpleado,remitente,mensaje,fechaEnvio) 
				VALUES (cedCliente,cedEmpleado,idProducto,cantidad,1,mensaje,CURDATE());
			ELSE
				INSERT INTO mensajes(cedCliente,cedEmpleado,remitente,mensaje,fechaEnvio) 
				VALUES (cedCliente,cedEmpleado,idProducto,cantidad,0,mensaje,CURDATE());
			END IF;
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El producto que desea ingresar en el backorder ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_EliminarMensaje
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_EliminarMensaje`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_EliminarMensaje`(
	idMensaje INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
    IF EXISTS(
				  SELECT mensajes.mensaje
				  FROM mensajes
				  WHERE mensajes.idMensaje = idMensaje
				 )
		THEN
        
        DELETE FROM mensajes WHERE mensajes.idMensaje = idMensaje;
        
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El producto que desea ingresar en el backorder ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertarPedido
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarPedido`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarPedido`(
	nombreCliente VARCHAR(50),
    correoCliente VARCHAR(100),
    nombreEmpleado VARCHAR(50),
    nombreProducto VARCHAR(50),
    cantidadSolicitada INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE cedCliente INT;
    DECLARE cedEmpleado INT;
    DECLARE idProducto INT;
    DECLARE idPedido INT;
    
    SET cedCliente = (SELECT clientes.cedula FROM clientes WHERE clientes.nombre = nombreCliente AND clientes.correo = correo);
    SET cedEmpleado = (SELECT planillas.cedula FROM planillas WHERE planillas.nombre = nombreEmpleado);
    SET idProducto = (SELECT productos.idProducto FROM productos WHERE productos.nombre = nombreProducto);
    
    INSERT INTO pedidos(fechaPedido,cedCliente,cedEmpleado,aprobado) VALUES(CURDATE(),cedCliente,cedEmpleado,0);
    
    SET idPedido = (SELECT pedidos.idPedido FROM pedidos WHERE pedidos.cedCliente = cedCliente AND pedidos.cedEmpleado = cedEmpleado);
    
	INSERT INTO productosXpedidos(idPedido,idProducto,cantidadSolicitada,cantidadRecibida) 
    VALUES (idPedido,idProducto,cantidadSolicitada,0);
            
    UPDATE inventariosxsedes SET inventariosxsedes.cantidad = (inventariosxsedes.cantidad - cantidadSolicitada)
	WHERE inventariosxsedes.idProducto = idProducto;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertarProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarProducto`(
	nombre VARCHAR(50),
	descripcion VARCHAR(100),
	utilidad VARCHAR(50),
	precio DOUBLE PRECISION,
	precioVenta DOUBLE PRECISION,
	nombreMarca VARCHAR(50)
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE idMarca INT;
    
    SET idMarca = (SELECT marcas.idMarca FROM marcas WHERE marcas.nombre = nombreMarca);
    
    IF NOT EXISTS(
				  SELECT productos.idProducto
				  FROM productos
				  WHERE productos.nombre = nombre
				 )
		THEN
			INSERT INTO productos(nombre,descripcion,utilidad,precio,precioVenta,idMarca) 
            VALUES (nombre,descripcion,utilidad,precio,precioVenta,idMarca);
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El producto que desea ingresar ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ModificarProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ModificarProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ModificarProducto`(
	idProducto INT,
	nuevadescripcion VARCHAR(100),
	nuevautilidad VARCHAR(50),
	nuevoprecio DOUBLE PRECISION,
	nuevoprecioVenta DOUBLE PRECISION,
	nuevoidMarca VARCHAR(50)
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE idMarca INT;
    DECLARE descripcion VARCHAR(100);
	DECLARE utilidad VARCHAR(50);
	DECLARE precio DOUBLE PRECISION;
	DECLARE precioV DOUBLE PRECISION;
    
    SET descripcion=(SELECT productos.descripcion FROM productos WHERE productos.idProducto = idProducto);
	SET utilidad=(SELECT productos.utilidad FROM productos WHERE productos.idProducto = idProducto);
	SET precio=(SELECT productos.precio FROM productos WHERE productos.idProducto = idProducto);
	SET precioV=(SELECT productos.precioVenta FROM productos WHERE productos.idProducto = idProducto);
	SET idMarca=(SELECT productos.idMarca FROM productos WHERE productos.idProducto = idProducto);
	
    /*Soluciona el caso en que no se desee modificar la descripcion*/
	SET nuevadescripcion=IFNULL(nuevadescripcion,descripcion);
	/*Soluciona el caso en que no se desee modificar la utilidad*/
	SET nuevautilidad=IFNULL(nuevautilidad,utilidad);
	/*Soluciona el caso en que no se desee modificar el precio*/
	SET nuevoprecio=IFNULL(nuevoprecio,precio);
	/*Soluciona el caso en que no se desee modificar el precio venta*/
	SET nuevoprecioVenta=IFNULL(nuevoprecioVenta,precioV);
    /*Soluciona el caso en que no se desee modificar el nombre de la marca*/
	SET nuevoidMarca=IFNULL(nuevoidMarca,idMarca);
    
    IF EXISTS(
				  SELECT productos.idProducto
				  FROM productos
				  WHERE productos.nombre = nombre
				 )
		THEN
			
			UPDATE productos SET productos.descripcion = nuevadescripcion, productos.utilidad = nuevautilidad,
            productos.precio = nuevoprecio, productos.precioVenta = nuevoprecioVenta, productos.idMarca = nuevoidMarca
            WHERE productos.idProducto = idProducto;
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El producto no se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_EliminarProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_EliminarProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_EliminarProducto`(
	idProducto INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
    IF EXISTS(
				  SELECT productos.nombre
				  FROM productos
				  WHERE productos.idProducto = idProducto
				 )
		THEN
			DELETE FROM productos WHERE productos.idProducto = idProducto;
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'El producto no se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerProductos
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerProductos`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerProductos`()
BEGIN

	SELECT productos.idProducto, productos.nombre, productos.descripcion, productos.utilidad, productos.precio, productos.precioVenta, marcas.nombre AS 'NombreMarca'
    FROM productos
    INNER JOIN marcas ON (marcas.idMarca = productos.idMarca);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerProductosXMarca
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerProductosXMarca`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerProductosXMarca`(
	idMarca INT
)
BEGIN

	SELECT productos.idProducto, productos.nombre, productos.descripcion, productos.utilidad, productos.precio, productos.precioVenta, marcas.nombre AS 'NombreMarca'
    FROM productos
    INNER JOIN marcas ON (marcas.idMarca = productos.idMarca)
    WHERE productos.idMarca = idMarca;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerProducto
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerProducto`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerProducto`(
	idProducto INT
)
BEGIN

	SELECT productos.idProducto, productos.nombre, productos.descripcion, productos.utilidad, productos.precio, productos.precioVenta, marcas.nombre AS 'NombreMarca'
    FROM productos
    INNER JOIN marcas ON (marcas.idMarca = productos.idMarca)
    WHERE productos.idProducto = idProducto;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertarSede
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_InsertarSede`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_InsertarSede`(
	nombre VARCHAR(50),
    ubicacion POLYGON
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
	IF NOT EXISTS(
				  SELECT sedes.idSede
				  FROM sedes
				  WHERE sedes.nombre = nombre
				 )
		THEN
			INSERT INTO sedes(nombre,ubicacion) VALUES (nombre, ubicacion);
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'La Sede que desea ingresar ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ModificarSede
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ModificarSede`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ModificarSede`(
	idSede INT,
	nuevonombre VARCHAR(50),
    nuevaubicacion POLYGON
)
BEGIN

	DECLARE msgError VARCHAR(255);
    DECLARE nombre VARCHAR(50);
    DECLARE ubicacion POLYGON;
    
    SET nombre = (SELECT sedes.nombre FROM sedes WHERE sedes.idSede = idSede);
    SET ubicacion = (SELECT sedes.ubicacion FROM sedes WHERE sedes.idSede = idSede);
    
    SET nuevonombre = IFNULL(nuevonombre, nombre);
    SET nuevaubicacion = IFNULL(nuevaubicacion, ubicaion);
    
	IF EXISTS(
				  SELECT sedes.nombre
				  FROM sedes
				  WHERE sedes.idSede = idSede
				 )
		THEN
			UPDATE sedes SET sedes.nombre = nuevonombre, sedes.ubicacion = nuevaubicacion
            WHERE sedes.idSede = idSede;
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'La Sede que desea ingresar ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_EliminarSede
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_EliminarSede`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_EliminarSede`(
	idSede INT
)
BEGIN

	DECLARE msgError VARCHAR(255);
    
	IF EXISTS(
				  SELECT sedes.nombre
				  FROM sedes
				  WHERE sedes.idSede = idSede
				 )
		THEN
			DELETE FROM sedes WHERE sedes.idSede = idSede;
	ELSE
        SIGNAL SQLSTATE '45000';
		SET msgError = 'La Sede que desea ingresar ya se encuentra en el sistema.';
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerSedes
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerSedes`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerSedes`()
BEGIN

	SELECT sedes.idSede, sedes.nombre, sedes.ubicacion
    FROM sedes;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerSedes
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerSedes`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerSedes`(
	idSede INT
)
BEGIN

	SELECT sedes.idSede, sedes.nombre, sedes.ubicacion
    FROM sedes
    WHERE sedes.idSede = idSede;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_ObtenerProductosxSedexDepartamento
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_ObtenerProductosxSedexDepartamento`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_ObtenerProductosxSedexDepartamento`(
	nombreSede VARCHAR(50),
    nombreDepartamento VARCHAR(50)
)
BEGIN

	DECLARE fechaAnterior DATE;
    
    SET fechaAnterior = (SELECT DATE_SUB(CURDATE(),INTERVAL 3 MONTH));

	SELECT COUNT(productosXpedidos.idPxP) AS 'CantidadVentido', sedes.nombre AS 'Sede', departamentos.nombre AS 'Departamento', marcas.nombre AS 'Marca', 
    productos.idProducto AS 'IdProducto', productos.nombre AS 'NombreProducto', productos.descripcion AS 'DescripcionP', productos.utilidad AS 'UtilitdadP', 
    productos.precio AS 'PrecioP', productos.precioVenta AS 'PrecioVenta', inventariosXsedes.cantidad AS 'Cantidad', inventariosXsedes.pasillo AS 'Pasillo', 
    inventariosXsedes.estante AS 'Estante'
    FROM sedes INNER JOIN departamentosXsedes ON (departamentosXsedes.idSede = sedes.idSede) 
    INNER JOIN departamentos ON (departamentos.idDepartamento = departamentosXsedes.idDepartamento)
    INNER JOIN inventariosXsedes ON (inventariosXsedes.idSede = sedes.idSede AND inventariosXsedes.idDepartamento = departamentos.idDepartamento)
    INNER JOIN productos ON (productos.idProducto = inventariosXsedes.idProducto)
    INNER JOIN marcas ON (marcas.idMarca = productos.idMarca)
    INNER JOIN productosXpedidos ON (productosXpedidos.idProducto = productos.idProducto)
    INNER JOIN pedidos ON (pedidos.idPedido = productosXpedidos.idPedido)
    WHERE sedes.nombre = nombreSede AND departamentos.nombre = nombreDepartamento
    AND (pedidos.fechaPedido BETWEEN fechaAnterior AND CURDATE());

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_BusquedaProductos
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_BusquedaProductos`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_BusquedaProductos`(
	nombreProducto VARCHAR(50),
    descripcion VARCHAR(100),
    utilidad VARCHAR(50)
)
BEGIN

	IF (nombreProducto != NULL)
		THEN
        SELECT marcas.nombre, productos.idProducto, productos.nombre, productos.descripcion, productos.utilidad, productos.precio,
		productos.precioVenta
        FROM productos
        INNER JOIN marcas ON (marcas.idMarca = productos.idMarca)
		WHERE productos.nombre = nombreProducto;
    
	ELSEIF(descripcion != NULL)
		THEN
        SELECT marcas.nombre, productos.idProducto, productos.nombre, productos.descripcion, productos.utilidad, productos.precio,
		productos.precioVenta
        FROM productos
        INNER JOIN marcas ON (marcas.idMarca = productos.idMarca)
		WHERE productos.descripcion LIKE CONCAT('%', descripcion, '%');
        
	ELSEIF(utilidad != NULL)
		THEN
        SELECT marcas.nombre, productos.idProducto, productos.nombre, productos.descripcion, productos.utilidad, productos.precio,
		productos.precioVenta
        FROM productos
        INNER JOIN marcas ON (marcas.idMarca = productos.idMarca)
		WHERE productos.utilidad LIKE CONCAT('%', utilidad, '%');
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_SedeMasVentas
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_SedeMasVentas`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_SedeMasVentas`()
BEGIN
	
    DECLARE primerdiaMes DATE;
    
    SET primerdiaMes = (SELECT CURDATE() - INTERVAL (DAY(CURDATE())-1) DAY);
     
    SELECT sedes.nombre AS 'Sede', (SUM(productosxpedidos.cantidadSolicitada)*productos.precioVenta) AS 'Garancia'
    FROM sedes
    INNER JOIN planillas ON (planillas.idSede = sedes.idSede)
    INNER JOIN inventariosxsedes ON (inventariosxsedes.idSede = sedes.idSede)
    INNER JOIN productos ON (productos.idProducto = inventariosxsedes.idProducto)
    INNER JOIN productosXpedidos ON (productosXpedidos.idProducto = productos.idProducto)
    INNER JOIN pedidos ON (pedidos.idPedido = productosXpedido.idPedido AND pedidos.cedEmpleado = planillas.cedula)
    WHERE (pedidos.fechaPedido BETWEEN primerdiaMes AND CURDATE())
    GROUP BY sedes.nombre;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_EmpleadoMasVentasXSede
-- -----------------------------------------------------

USE `ferreteria`;
DROP procedure IF EXISTS `ferreteria`.`usp_EmpleadoMasVentasXSede`;

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_EmpleadoMasVentasXSede`(
	nombreSede VARCHAR(50)
)
BEGIN
	
    DECLARE primerdiaMes DATE;
    
    SET primerdiaMes = (SELECT CURDATE() - INTERVAL (DAY(CURDATE())-1) DAY);
     
    SELECT CONCAT(planillas.nombre, ' ', planillas.apellidoP, ' ', planillas.apellidoM) AS 'NombreCompleto', (SUM(productosxpedidos.cantidadSolicitada)*productos.precioVenta) AS 'Garancia'
    FROM productos
    INNER JOIN productosXpedidos ON (productosXpedidos.idProducto = productos.idProducto)
    INNER JOIN pedidos ON (pedidos.idPedido = productosXpedido.idPedido)
    INNER JOIN planillas ON (planillas.cedula = pedidos.cedEmpleado)
    WHERE (pedidos.fechaPedido BETWEEN primerdiaMes AND CURDATE())
    ORDER BY CONCAT(planillas.nombre, ' ', planillas.apellidoP, ' ', planillas.apellidoM);

END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
